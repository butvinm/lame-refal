*$FROM LibraryEx
$EXTERN Inc;
$EXTERN Reduce;

*$FROM FPF
$EXTERN FPF-Add;
$EXTERN FPF-Div;
$EXTERN FPF-Mul;
$EXTERN FPF-Sub;
$EXTERN FPF-FromInt;

$ENTRY Lagrange {
  (e.X) e.Points
    = <DropIndex
      <Reduce
        (Lagrange-Sum (e.X) e.Points)
        (0 <FPF-FromInt 0>)
        e.Points
      >
    >;
}

Lagrange-Sum {
  (e.X) e.Points (s.I e.Acc) ((e.Xi) (e.Yi))
    = (
      <Inc s.I>
      <FPF-Add
        (e.Acc)
        <FPF-Mul (e.Yi) <Li s.I (e.X) (e.Xi) e.Points>>
      >
    );
}

Li {
  s.I (e.X) (e.Xi) e.Points
    = <DropIndex
      <Reduce
        (Li-Product s.I (e.X) (e.Xi))
        (0 <FPF-FromInt 1>)
        e.Points
      >
    >;
}

Li-Product {
  /* i == j => skip, j++ */
  s.I (e.X) (e.Xi)
  (s.I e.Acc) ((e.Xj) (e.Yj))
    = (
      <Inc s.I>
      e.Acc
    );

  /* i != j => acc*((x - xj) / (xi - xj)), j++ */
  s.I (e.X) (e.Xi)
  (s.J e.Acc) ((e.Xj) (e.Yj))
    = (
      <Inc s.J>
      <FPF-Mul
        (e.Acc)
        <FPF-Div (<FPF-Sub (e.X) e.Xj>) <FPF-Sub (e.Xi) e.Xj>>
      >
    );
}

DropIndex {
  (s.I e.Acc) = e.Acc;
}

$ENTRY Linear {
  (e.X) ((e.X0) (e.Y0)) ((e.X1) (e.Y1)) ((e.X2) (e.Y2)) e.Points
  , <Compare (e.X) e.X1> : '+'
    = <Linear (e.X) ((e.X1) (e.Y1)) ((e.X2) (e.Y2)) e.Points>;

  /* x <= x1 || only two points left */
  (e.X) ((e.X0) (e.Y0)) ((e.X1) (e.Y1)) e.Points
    = <FPF-Add
      (e.Y0)
      <FPF-Mul
        (<FPF-Sub (e.X) e.X0>)
        <FPF-Div
          (<FPF-Sub (e.Y1) e.Y0>)
          <FPF-Sub (e.X1) e.X0>
        >
      >
    >;
}